{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_soulboundTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "UserNotRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "friendAddress",
          "type": "address"
        }
      ],
      "name": "FriendAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "friendListClaimId",
          "type": "bytes32"
        }
      ],
      "name": "FriendListUploaded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identityContractAddress",
          "type": "address"
        }
      ],
      "name": "IdentityContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "email",
          "type": "string"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_friendAddress",
          "type": "address"
        }
      ],
      "name": "addFriend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authenticate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pubkey",
          "type": "address"
        }
      ],
      "name": "checkUserExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkUserExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployIdentityContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAppUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "accountAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "identityContractAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "nameClaimId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "emailClaimId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "passwordClaimId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "isRegisteredClaimId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "friendListClaimId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "tokenIdClaimId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct UserRegistrationAndAuthentication.ClaimIds",
              "name": "claimIds",
              "type": "tuple"
            }
          ],
          "internalType": "struct UserRegistrationAndAuthentication.AllUserStruct[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyFriendList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyUserInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getSoulboundTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getSoulboundTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pubkey",
          "type": "address"
        }
      ],
      "name": "getUsername",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityContractInstance",
      "outputs": [
        {
          "internalType": "contract ERC735",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_passwordHash",
          "type": "bytes32"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soulboundToken",
      "outputs": [
        {
          "internalType": "contract Soulbound",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "uploadClaims",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "passwordHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "soulboundTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc661482d8e36a52f709672fe7c1322d006a72f30854981ee8b91f722cd9eda34",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "4930786",
    "logsBloom": "0x
    "blockHash": "0xff76a51789c099403e9f6e6b62ee0d56a0a50b924b232a4221979d434c449caf",
    "transactionHash": "0xc661482d8e36a52f709672fe7c1322d006a72f30854981ee8b91f722cd9eda34",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "4930786",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "67517b3177dad054432eb8d16a18e6a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_soulboundTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UserNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"friendAddress\",\"type\":\"address\"}],\"name\":\"FriendAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"friendListClaimId\",\"type\":\"bytes32\"}],\"name\":\"FriendListUploaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityContractAddress\",\"type\":\"address\"}],\"name\":\"IdentityContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_friendAddress\",\"type\":\"address\"}],\"name\":\"addFriend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authenticate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pubkey\",\"type\":\"address\"}],\"name\":\"checkUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployIdentityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAppUser\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"identityContractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"nameClaimId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"emailClaimId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"passwordClaimId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"isRegisteredClaimId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"friendListClaimId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenIdClaimId\",\"type\":\"bytes32\"}],\"internalType\":\"struct UserRegistrationAndAuthentication.ClaimIds\",\"name\":\"claimIds\",\"type\":\"tuple\"}],\"internalType\":\"struct UserRegistrationAndAuthentication.AllUserStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyFriendList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyUserInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getSoulboundTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getSoulboundTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pubkey\",\"type\":\"address\"}],\"name\":\"getUsername\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityContractInstance\",\"outputs\":[{\"internalType\":\"contract ERC735\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_passwordHash\",\"type\":\"bytes32\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulboundToken\",\"outputs\":[{\"internalType\":\"contract Soulbound\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"uploadClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"passwordHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"soulboundTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UserRegistrationAndAuthentication.sol\":\"UserRegistrationAndAuthentication\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x8d1cabca557cb77d97d801d674f0dacc33659e1430cdd34f91ae5d033fc3d93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd03f5c3d258a9b0f751a3246e0802106585561ab5909b808368759364fc786f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ERC735.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ncontract ERC735 {\\n    event ClaimRequested(\\n        uint256 indexed claimRequestId,\\n        uint256 indexed claimType,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri\\n    );\\n    event ClaimAdded(\\n        bytes32 indexed claimId,\\n        uint256 indexed claimType,\\n        address indexed issuer,\\n        uint256 signatureType,\\n        bytes32 signature,\\n        bytes claim,\\n        string uri\\n    );\\n    event ClaimRemoved(\\n        bytes32 indexed claimId,\\n        uint256 indexed claimType,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri\\n    );\\n    event ClaimChanged(\\n        bytes32 indexed claimId,\\n        uint256 indexed claimType,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri\\n    );\\n\\n    struct Claim {\\n        uint256 claimType;\\n        uint256 scheme;\\n        address issuer; // msg.sender\\n        bytes signature; // this.address + topic + data\\n        bytes data;\\n        string uri;\\n    }\\n\\n    mapping(bytes32 => Claim) public claims;\\n    mapping(uint256 => bytes32[]) public claimIdsByType;\\n\\n    function getClaim(\\n        bytes32 _claimId\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 claimType,\\n            uint256 scheme,\\n            address issuer,\\n            bytes memory signature,\\n            bytes memory data,\\n            string memory uri\\n        )\\n    {\\n        Claim storage claim = claims[_claimId];\\n        return (\\n            claim.claimType,\\n            claim.scheme,\\n            claim.issuer,\\n            claim.signature,\\n            claim.data,\\n            claim.uri\\n        );\\n    }\\n\\n    function getClaimIdsByType(\\n        uint256 _claimType\\n    ) public view returns (bytes32[] memory claimIds) {\\n        return claimIdsByType[_claimType];\\n    }\\n\\n    function addClaim(\\n        uint256 _claimType,\\n        uint256 _scheme,\\n        address _issuer,\\n        bytes memory _signature,\\n        bytes memory _data,\\n        string memory _uri\\n    ) public returns (bytes32) {\\n        bytes32 newClaimId = keccak256(abi.encodePacked(_issuer, _claimType));\\n        claims[newClaimId] = Claim(\\n            _claimType,\\n            _scheme,\\n            _issuer,\\n            _signature,\\n            _data,\\n            _uri\\n        );\\n        claimIdsByType[_claimType].push(newClaimId);\\n        emit ClaimAdded(\\n            newClaimId,\\n            _claimType,\\n            _issuer,\\n            _scheme,\\n            keccak256(_signature),\\n            _data,\\n            _uri\\n        );\\n        return newClaimId;\\n    }\\n\\n    function removeClaim(bytes32 _claimId) public returns (bool success) {\\n        require(msg.sender == claims[_claimId].issuer);\\n        delete claims[_claimId];\\n\\n        uint256 claimType = claims[_claimId].claimType;\\n        bytes32[] storage claimsOfType = claimIdsByType[claimType];\\n        for (uint256 i = 0; i < claimsOfType.length; i++) {\\n            if (claimsOfType[i] == _claimId) {\\n                if (i != claimsOfType.length - 1) {\\n                    claimsOfType[i] = claimsOfType[claimsOfType.length - 1];\\n                }\\n                claimsOfType.pop();\\n                break;\\n            }\\n        }\\n\\n        emit ClaimRemoved(\\n            _claimId,\\n            claimType,\\n            claims[_claimId].scheme,\\n            claims[_claimId].issuer,\\n            claims[_claimId].signature,\\n            claims[_claimId].data,\\n            claims[_claimId].uri\\n        );\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xa2ff5e153400502c9028a6a362354c15005e4e9c32edf44eac8666fc737bb5ae\",\"license\":\"MIT\"},\"contracts/Soulbound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract Soulbound is ERC721, ERC721URIStorage {\\n    uint256 private _tokenIdCounter;\\n    using Strings for uint256;\\n    string public constant TOKEN_URI =\\n        \\\"ipfs://QmacW3dcCGqpsbfsgFJaXpJ2RKZnSTYjUPvyvmZLSnC5iN\\\";\\n    constructor() ERC721(\\\"SoulBound\\\", \\\"SBT\\\") {}\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        require(from == address(0), \\\"Token not transferable\\\");\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function getTokenCounter() public view returns (uint256) {\\n        return _tokenIdCounter;\\n    }\\n\\n    function safeMint(address to) public {\\n        _tokenIdCounter += 1;\\n        _safeMint(to, _tokenIdCounter);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _burn(\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721URIStorage) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        require(_exists(tokenId), \\\"URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        if (bytes(baseURI).length > 0) {\\n            return TOKEN_URI;\\n        } else {\\n            return super.tokenURI(tokenId);\\n        }\\n    }\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"https://example.com/token/\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x2321cae7d6f1e82132a522cc97498bf3882188b4d83d0651c4e7d092b42dc9b9\",\"license\":\"MIT\"},\"contracts/UserRegistrationAndAuthentication.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"./Soulbound.sol\\\";\\nimport \\\"./ERC735.sol\\\"; // Import the ERC735 contract\\n\\nerror UserNotRegistered();\\n\\n//0x3a2f83b7b29e34942a4a3211bcb3e8e146c4f779193fc4f3246c41fcf5c221b8\\ncontract UserRegistrationAndAuthentication {\\n    // Struct to store user information\\n    struct User {\\n        string name; // User's name\\n        string email; // User's email address\\n        bytes32 passwordHash; // Hashed password\\n        bool isRegistered; // Flag to indicate if the user is registered\\n        address[] friendList; // Array to store friend addresses\\n        uint256 soulboundTokenId; // To store soulbound token id\\n    }\\n    struct AllUserStruct {\\n        string name;\\n        address accountAddress;\\n        address identityContractAddress;\\n        ClaimIds claimIds; // Add ClaimIds struct\\n    }\\n    struct ClaimIds {\\n        bytes32 nameClaimId;\\n        bytes32 emailClaimId;\\n        bytes32 passwordClaimId;\\n        bytes32 isRegisteredClaimId;\\n        bytes32 friendListClaimId;\\n        bytes32 tokenIdClaimId;\\n    }\\n\\n    AllUserStruct[] getAllUsers;\\n\\n    // Mapping to link each user's Ethereum address with their user information\\n    mapping(address => User) public users;\\n    mapping(address => bool) public userExist;\\n\\n    Soulbound public soulboundToken; // Instance of the Soulbound token contract\\n\\n    // Event to emit when a new user is registered\\n    event UserRegistered(\\n        address indexed userAddress,\\n        string name,\\n        string email\\n    );\\n\\n    event FriendAdded(\\n        address indexed userAddress,\\n        address indexed friendAddress\\n    );\\n    event FriendListUploaded(\\n        address indexed userAddress,\\n        bytes32 friendListClaimId\\n    );\\n\\n    constructor(address _soulboundTokenAddress) {\\n        soulboundToken = Soulbound(_soulboundTokenAddress);\\n    }\\n\\n    ERC735 public identityContractInstance;\\n\\n    event IdentityContractDeployed(address indexed identityContractAddress);\\n\\n    function deployIdentityContract() external {\\n        identityContractInstance = new ERC735();\\n        emit IdentityContractDeployed(address(identityContractInstance));\\n    }\\n\\n    // Function to register a new user\\n    function registerUser(\\n        string memory _name,\\n        string memory _email,\\n        bytes32 _passwordHash\\n    ) public {\\n        require(!users[msg.sender].isRegistered, \\\"User already registered\\\");\\n        User memory newUser = User({\\n            name: _name,\\n            email: _email,\\n            passwordHash: _passwordHash,\\n            isRegistered: true,\\n            friendList: new address[](0), // to initiate empty friend list\\n            soulboundTokenId: 0 //Initialise with 0\\n        });\\n        //push details of user into array\\n        users[msg.sender] = newUser;\\n        // Mint a new Soulbound token for the user\\n        uint256 tokenId = soulboundToken.getTokenCounter() + 1;\\n        soulboundToken.safeMint(msg.sender);\\n        users[msg.sender].soulboundTokenId = tokenId;\\n        // To create identity claims:\\n        ClaimIds memory claimIds;\\n        claimIds.nameClaimId = identityContractInstance.addClaim(1,1,msg.sender,\\\"\\\",bytes(_name),\\\"\\\");\\n        claimIds.emailClaimId = identityContractInstance.addClaim(\\n            2,\\n            1,\\n            msg.sender,\\n            \\\"\\\",\\n            bytes(_email),\\n            \\\"\\\"\\n        );\\n        claimIds.passwordClaimId = identityContractInstance.addClaim(\\n            3,\\n            1,\\n            msg.sender,\\n            \\\"\\\",\\n            abi.encodePacked(_passwordHash),\\n            \\\"\\\"\\n        );\\n        bytes memory isRegisteredData = abi.encodePacked(uint256(1));\\n        claimIds.isRegisteredClaimId = identityContractInstance.addClaim(\\n            4,\\n            1,\\n            msg.sender,\\n            \\\"\\\",\\n            isRegisteredData,\\n            \\\"\\\"\\n        );\\n        address[] memory emptyFriendList;\\n        bytes memory friendListData = abi.encode(emptyFriendList);\\n        claimIds.friendListClaimId = identityContractInstance.addClaim(\\n            5,\\n            1,\\n            msg.sender,\\n            \\\"\\\",\\n            friendListData,\\n            \\\"\\\"\\n        );\\n        bytes memory tokenIdData = abi.encode(tokenId);\\n        claimIds.tokenIdClaimId = identityContractInstance.addClaim(\\n            6,\\n            1,\\n            msg.sender,\\n            \\\"\\\",\\n            tokenIdData,\\n            \\\"\\\"\\n        );\\n        getAllUsers.push(\\n            AllUserStruct({\\n                name: _name,\\n                accountAddress: msg.sender,\\n                identityContractAddress: address(identityContractInstance),\\n                claimIds: claimIds\\n            })\\n        );\\n        userExist[msg.sender] = true;\\n        emit UserRegistered(msg.sender, _name, _email);\\n    }\\n\\n    function checkUserExists() public view returns (bool) {\\n        return userExist[msg.sender];\\n    }\\n\\n    // Function to retrieve user information for the caller\\n    function getMyUserInfo()\\n        public\\n        view\\n        returns (string memory, string memory, address[] memory)\\n    {\\n        require(users[msg.sender].isRegistered, \\\"User not registered\\\");\\n\\n        return (\\n            users[msg.sender].name,\\n            users[msg.sender].email,\\n            users[msg.sender].friendList\\n        );\\n    }\\n\\n    function checkUserExist(address pubkey) public view returns (bool) {\\n        return bytes(users[pubkey].name).length > 0;\\n    }\\n\\n    // GET USERNAME\\n    function getUsername(address pubkey) external view returns (string memory) {\\n        require(checkUserExist(pubkey), \\\"User is not registered\\\");\\n        // return the name of user\\n        return users[pubkey].name;\\n    }\\n\\n\\n    function authenticate() public view returns (bool) {\\n        require(users[msg.sender].isRegistered, \\\"User not registered\\\");\\n\\n        uint256 tokenId = users[msg.sender].soulboundTokenId;\\n        return tokenId != 0; // Return true if token ID is not zero\\n    }\\n\\n    function addFriend(address _friendAddress) public {\\n        // check that user is registered\\n        require(users[msg.sender].isRegistered, \\\"User not registered!\\\");\\n        require(\\n            msg.sender != _friendAddress,\\n            \\\"User cannot add themselves as friend!\\\"\\n        );\\n        if (!users[_friendAddress].isRegistered) revert UserNotRegistered();\\n\\n        // check if friend already exist in list\\n        bool isFriend = false;\\n        for (uint256 i = 0; i < users[msg.sender].friendList.length; i++) {\\n            if (users[msg.sender].friendList[i] == _friendAddress) {\\n                isFriend = true;\\n                break;\\n            }\\n        }\\n        require(!isFriend, \\\"User is already a friend\\\");\\n        users[msg.sender].friendList.push(_friendAddress);\\n        emit FriendAdded(msg.sender, _friendAddress);\\n\\n        //bi-directional friend addition\\n        users[_friendAddress].friendList.push(msg.sender);\\n        emit FriendAdded(_friendAddress, msg.sender);\\n    }\\n\\n    // GET MY FRIEND\\n    function getMyFriendList() public view returns (address[] memory) {\\n        require(users[msg.sender].isRegistered, \\\"User not registered\\\");\\n        return users[msg.sender].friendList;\\n    }\\n\\n    // function to fetch all registered users\\n    function getAllAppUser() public view returns (AllUserStruct[] memory) {\\n        return getAllUsers;\\n    }\\n\\n    function getUser(\\n        address _userAddress\\n    ) internal view returns (AllUserStruct memory) {\\n        for (uint256 i = 0; i < getAllUsers.length; i++) {\\n            if (getAllUsers[i].accountAddress == _userAddress) {\\n                return getAllUsers[i];\\n            }\\n        }\\n        revert(\\\"UserNotRegistered\\\");\\n    }\\n\\n    function uploadClaims(address userAddress) public {\\n        require(userExist[userAddress], \\\"User not registered\\\");\\n\\n        // Retrieve user information from the user struct\\n        AllUserStruct memory user = getUser(userAddress);\\n        ClaimIds memory claimIds = user.claimIds;\\n\\n        // Retrieve the current friend list from the user struct\\n        address[] memory friendList = users[userAddress].friendList;\\n\\n        // Encode friend list data\\n        bytes memory friendListData = abi.encode(friendList);\\n\\n        // Add friend list claim to the ERC735 contract\\n        bytes32 friendListClaimId = identityContractInstance.addClaim(\\n            5, // Claim type for friend list\\n            1, // Scheme\\n            userAddress, // Issuer\\n            \\\"\\\", // Signature\\n            friendListData, // Data\\n            \\\"\\\" // URI\\n        );\\n\\n        // Emit event or log friend list addition\\n        emit FriendListUploaded(userAddress, friendListClaimId);\\n\\n        // Update the claim ID in the user's ClaimIds structure\\n        claimIds.friendListClaimId = friendListClaimId;\\n    }\\n\\n    function getSoulboundTokenId(\\n        address userAddress\\n    ) public view returns (uint256) {\\n        require(userExist[userAddress], \\\"User not registered\\\");\\n        return users[userAddress].soulboundTokenId;\\n    }\\n\\n    function getSoulboundTokenURI(\\n        address userAddress\\n    ) public view returns (string memory) {\\n        require(userExist[userAddress], \\\"User not registered\\\");\\n        uint256 tokenId = users[userAddress].soulboundTokenId;\\n        return soulboundToken.tokenURI(tokenId);\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x0351611cf3a9fe62383d49c0a8292acf72e0b3394c2bf3ceedc3038ca0c364a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005915380380620059158339818101604052810190620000379190620000e9565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b18262000084565b9050919050565b620000c381620000a4565b8114620000cf57600080fd5b50565b600081519050620000e381620000b8565b92915050565b6000602082840312156200010257620001016200007f565b5b60006200011284828501620000d2565b91505092915050565b6157ea806200012b6000396000f3fe6080604052600436106101025760003560e01c8063926bef6311610095578063ab7e7cf611610064578063ab7e7cf614610345578063b98224d214610382578063bd0f4d0d146103ad578063ce43c032146103d8578063d7a1cfe11461041557610109565b8063926bef6314610271578063a24d41de146102ae578063a7192492146102d9578063a87430ba1461030457610109565b80635ad3da79116100d15780635ad3da79146101c757806368f6d82a146101f4578063823599941461021d5780638fe8a70a1461025a57610109565b80630269dbe71461010b5780631ec18b411461013657806337add45b1461015f578063380c7a671461019c57610109565b3661010957005b005b34801561011757600080fd5b5061012061043e565b60405161012d9190612844565b60405180910390f35b34801561014257600080fd5b5061015d600480360381019061015891906128b1565b610464565b005b34801561016b57600080fd5b50610186600480360381019061018191906128b1565b6106ff565b604051610193919061296e565b60405180910390f35b3480156101a857600080fd5b506101b161087d565b6040516101be91906129ab565b60405180910390f35b3480156101d357600080fd5b506101dc610960565b6040516101eb93929190612a84565b60405180910390f35b34801561020057600080fd5b5061021b60048036038101906102169190612c3b565b610c65565b005b34801561022957600080fd5b50610244600480360381019061023f91906128b1565b611692565b6040516102519190612cdf565b60405180910390f35b34801561026657600080fd5b5061026f61176a565b005b34801561027d57600080fd5b50610298600480360381019061029391906128b1565b61183a565b6040516102a591906129ab565b60405180910390f35b3480156102ba57600080fd5b506102c3611894565b6040516102d09190612ef4565b60405180910390f35b3480156102e557600080fd5b506102ee611a81565b6040516102fb9190612f37565b60405180910390f35b34801561031057600080fd5b5061032b600480360381019061032691906128b1565b611aa7565b60405161033c959493929190612f61565b60405180910390f35b34801561035157600080fd5b5061036c600480360381019061036791906128b1565b611bfa565b60405161037991906129ab565b60405180910390f35b34801561038e57600080fd5b50610397611c1a565b6040516103a491906129ab565b60405180910390f35b3480156103b957600080fd5b506103c2611c6e565b6040516103cf9190612fc2565b60405180910390f35b3480156103e457600080fd5b506103ff60048036038101906103fa91906128b1565b611dcb565b60405161040c919061296e565b60405180910390f35b34801561042157600080fd5b5061043c600480360381019061043791906128b1565b611ee7565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e790613030565b60405180910390fd5b60006104fb826123c8565b90506000816060015190506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018054806020026020016040519081016040528092919081815260200182805480156105ca57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610580575b505050505090506000816040516020016105e49190612fc2565b60405160208183030381529060405290506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b1a34e0d6005600189866040518563ffffffff1660e01b815260040161065a9493929190613173565b6020604051808303816000875af1158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d91906131fa565b90508573ffffffffffffffffffffffffffffffffffffffff167faeeca7d770a059d70a737f05d33f9f470adf5e85948690615373b86dde1375ef826040516106e59190613227565b60405180910390a280846080018181525050505050505050565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661078d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078490613030565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87b56dd826040518263ffffffff1660e01b815260040161082f9190612cdf565b600060405180830381865afa15801561084c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061087591906132b2565b915050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1661090e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090590613030565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501549050600081141591505090565b6060806060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166109f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109eb90613030565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401828054610ac69061332a565b80601f0160208091040260200160405190810160405280929190818152602001828054610af29061332a565b8015610b3f5780601f10610b1457610100808354040283529160200191610b3f565b820191906000526020600020905b815481529060010190602001808311610b2257829003601f168201915b50505050509250818054610b529061332a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7e9061332a565b8015610bcb5780601f10610ba057610100808354040283529160200191610bcb565b820191906000526020600020905b815481529060010190602001808311610bae57829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610c5357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c09575b50505050509050925092509250909192565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615610cf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cec906133a7565b60405180910390fd5b60006040518060c00160405280858152602001848152602001838152602001600115158152602001600067ffffffffffffffff811115610d3857610d37612ada565b5b604051908082528060200260200182016040528015610d665781602001602082028036833780820191505090505b5081526020016000815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610dc89190613569565b506020820151816001019081610dde9190613569565b506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055506080820151816004019080519060200190610e2592919061266f565b5060a0820151816005015590505060006001600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e02007d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec89190613667565b610ed291906136c3565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340d097c3336040518263ffffffff1660e01b8152600401610f2f91906136f7565b600060405180830381600087803b158015610f4957600080fd5b505af1158015610f5d573d6000803e3d6000fd5b5050505080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050181905550610fb06126f9565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b1a34e0d600180338a6040518563ffffffff1660e01b81526004016110129493929190613712565b6020604051808303816000875af1158015611031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105591906131fa565b816000018181525050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b1a34e0d6002600133896040518563ffffffff1660e01b81526004016110c194939291906137bf565b6020604051808303816000875af11580156110e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110491906131fa565b816020018181525050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b1a34e0d6003600133886040516020016111619190613852565b6040516020818303038152906040526040518563ffffffff1660e01b815260040161118f94939291906138a8565b6020604051808303816000875af11580156111ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d291906131fa565b816040018181525050600060016040516020016111ef919061393b565b6040516020818303038152906040529050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b1a34e0d6004600133856040518563ffffffff1660e01b81526004016112639493929190613991565b6020604051808303816000875af1158015611282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a691906131fa565b82606001818152505060606000816040516020016112c49190612fc2565b6040516020818303038152906040529050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b1a34e0d6005600133856040518563ffffffff1660e01b81526004016113389493929190613173565b6020604051808303816000875af1158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b91906131fa565b8460800181815250506000856040516020016113979190612cdf565b6040516020818303038152906040529050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b1a34e0d6006600133856040518563ffffffff1660e01b815260040161140b9493929190613a3e565b6020604051808303816000875af115801561142a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144e91906131fa565b8560a0018181525050600060405180608001604052808c81526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200187815250908060018154018082558091505060019003906000526020600020906009020160009091909190915060008201518160000190816115069190613569565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155505050506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f92822564bab8864c3a47b34e8d23fbce5c46234eb5da261f94087b995ac0f33b8b8b60405161167e929190613ab0565b60405180910390a250505050505050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171790613030565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501549050919050565b60405161177690612741565b604051809103906000f080158015611792573d6000803e3d6000fd5b50600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f540695f56f43a2d29a4d56e5a0718f7bfb969c1a939f75f48ede5147c4a1862660405160405180910390a2565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461188a9061332a565b9050119050919050565b60606000805480602002602001604051908101604052809291908181526020016000905b82821015611a7857838290600052602060002090600902016040518060800160405290816000820180546118eb9061332a565b80601f01602080910402602001604051908101604052809291908181526020018280546119179061332a565b80156119645780601f1061193957610100808354040283529160200191611964565b820191906000526020600020905b81548152906001019060200180831161194757829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382016040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505081525050815260200190600101906118b8565b50505050905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052806000526040600020600091509050806000018054611aca9061332a565b80601f0160208091040260200160405190810160405280929190818152602001828054611af69061332a565b8015611b435780601f10611b1857610100808354040283529160200191611b43565b820191906000526020600020905b815481529060010190602001808311611b2657829003601f168201915b505050505090806001018054611b589061332a565b80601f0160208091040260200160405190810160405280929190818152602001828054611b849061332a565b8015611bd15780601f10611ba657610100808354040283529160200191611bd1565b820191906000526020600020905b815481529060010190602001808311611bb457829003601f168201915b5050505050908060020154908060030160009054906101000a900460ff16908060050154905085565b60026020528060005260406000206000915054906101000a900460ff1681565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611cff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf690613030565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401805480602002602001604051908101604052809291908181526020018280548015611dc157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d77575b5050505050905090565b6060611dd68261183a565b611e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0c90613b33565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054611e629061332a565b80601f0160208091040260200160405190810160405280929190818152602001828054611e8e9061332a565b8015611edb5780601f10611eb057610100808354040283529160200191611edb565b820191906000526020600020905b815481529060010190602001808311611ebe57829003601f168201915b50505050509050919050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611f76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6d90613b9f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611fe4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fdb90613c31565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1661206a576040517f2163950f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040180549050811015612188578273ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401828154811061212657612125613c51565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036121755760019150612188565b808061218090613c80565b91505061206e565b5080156121ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c190613d14565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6cbc8134e69f02f9dbaa28d8f3d760a490876f55060afa4d6882a86c2590cc7b60405160405180910390a3600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f6cbc8134e69f02f9dbaa28d8f3d760a490876f55060afa4d6882a86c2590cc7b60405160405180910390a35050565b6123d061274e565b60005b60008054905081101561262e578273ffffffffffffffffffffffffffffffffffffffff166000828154811061240b5761240a613c51565b5b906000526020600020906009020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361261b576000818154811061246c5761246b613c51565b5b90600052602060002090600902016040518060800160405290816000820180546124959061332a565b80601f01602080910402602001604051908101604052809291908181526020018280546124c19061332a565b801561250e5780601f106124e35761010080835404028352916020019161250e565b820191906000526020600020905b8154815290600101906020018083116124f157829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382016040518060c001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815250508152505091505061266a565b808061262690613c80565b9150506123d3565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266190613d80565b60405180910390fd5b919050565b8280548282559060005260206000209081019282156126e8579160200282015b828111156126e75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061268f565b5b5090506126f591906127a8565b5090565b6040518060c001604052806000801916815260200160008019168152602001600080191681526020016000801916815260200160008019168152602001600080191681525090565b611a1480613da183390190565b604051806080016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016127a26126f9565b81525090565b5b808211156127c15760008160009055506001016127a9565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061280a612805612800846127c5565b6127e5565b6127c5565b9050919050565b600061281c826127ef565b9050919050565b600061282e82612811565b9050919050565b61283e81612823565b82525050565b60006020820190506128596000830184612835565b92915050565b6000604051905090565b600080fd5b600080fd5b600061287e826127c5565b9050919050565b61288e81612873565b811461289957600080fd5b50565b6000813590506128ab81612885565b92915050565b6000602082840312156128c7576128c6612869565b5b60006128d58482850161289c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156129185780820151818401526020810190506128fd565b60008484015250505050565b6000601f19601f8301169050919050565b6000612940826128de565b61294a81856128e9565b935061295a8185602086016128fa565b61296381612924565b840191505092915050565b600060208201905081810360008301526129888184612935565b905092915050565b60008115159050919050565b6129a581612990565b82525050565b60006020820190506129c0600083018461299c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6129fb81612873565b82525050565b6000612a0d83836129f2565b60208301905092915050565b6000602082019050919050565b6000612a31826129c6565b612a3b81856129d1565b9350612a46836129e2565b8060005b83811015612a77578151612a5e8882612a01565b9750612a6983612a19565b925050600181019050612a4a565b5085935050505092915050565b60006060820190508181036000830152612a9e8186612935565b90508181036020830152612ab28185612935565b90508181036040830152612ac68184612a26565b9050949350505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612b1282612924565b810181811067ffffffffffffffff82111715612b3157612b30612ada565b5b80604052505050565b6000612b4461285f565b9050612b508282612b09565b919050565b600067ffffffffffffffff821115612b7057612b6f612ada565b5b612b7982612924565b9050602081019050919050565b82818337600083830152505050565b6000612ba8612ba384612b55565b612b3a565b905082815260208101848484011115612bc457612bc3612ad5565b5b612bcf848285612b86565b509392505050565b600082601f830112612bec57612beb612ad0565b5b8135612bfc848260208601612b95565b91505092915050565b6000819050919050565b612c1881612c05565b8114612c2357600080fd5b50565b600081359050612c3581612c0f565b92915050565b600080600060608486031215612c5457612c53612869565b5b600084013567ffffffffffffffff811115612c7257612c7161286e565b5b612c7e86828701612bd7565b935050602084013567ffffffffffffffff811115612c9f57612c9e61286e565b5b612cab86828701612bd7565b9250506040612cbc86828701612c26565b9150509250925092565b6000819050919050565b612cd981612cc6565b82525050565b6000602082019050612cf46000830184612cd0565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000612d42826128de565b612d4c8185612d26565b9350612d5c8185602086016128fa565b612d6581612924565b840191505092915050565b612d7981612c05565b82525050565b60c082016000820151612d956000850182612d70565b506020820151612da86020850182612d70565b506040820151612dbb6040850182612d70565b506060820151612dce6060850182612d70565b506080820151612de16080850182612d70565b5060a0820151612df460a0850182612d70565b50505050565b6000610120830160008301518482036000860152612e188282612d37565b9150506020830151612e2d60208601826129f2565b506040830151612e4060408601826129f2565b506060830151612e536060860182612d7f565b508091505092915050565b6000612e6a8383612dfa565b905092915050565b6000602082019050919050565b6000612e8a82612cfa565b612e948185612d05565b935083602082028501612ea685612d16565b8060005b85811015612ee25784840389528151612ec38582612e5e565b9450612ece83612e72565b925060208a01995050600181019050612eaa565b50829750879550505050505092915050565b60006020820190508181036000830152612f0e8184612e7f565b905092915050565b6000612f2182612811565b9050919050565b612f3181612f16565b82525050565b6000602082019050612f4c6000830184612f28565b92915050565b612f5b81612c05565b82525050565b600060a0820190508181036000830152612f7b8188612935565b90508181036020830152612f8f8187612935565b9050612f9e6040830186612f52565b612fab606083018561299c565b612fb86080830184612cd0565b9695505050505050565b60006020820190508181036000830152612fdc8184612a26565b905092915050565b7f55736572206e6f74207265676973746572656400000000000000000000000000600082015250565b600061301a6013836128e9565b915061302582612fe4565b602082019050919050565b600060208201905081810360008301526130498161300d565b9050919050565b6000819050919050565b600061307561307061306b84613050565b6127e5565b612cc6565b9050919050565b6130858161305a565b82525050565b6000819050919050565b60006130b06130ab6130a68461308b565b6127e5565b612cc6565b9050919050565b6130c081613095565b82525050565b6130cf81612873565b82525050565b600082825260208201905092915050565b50565b60006130f66000836130d5565b9150613101826130e6565b600082019050919050565b600081519050919050565b60006131228261310c565b61312c81856130d5565b935061313c8185602086016128fa565b61314581612924565b840191505092915050565b600061315d6000836128e9565b9150613168826130e6565b600082019050919050565b600060c082019050613188600083018761307c565b61319560208301866130b7565b6131a260408301856130c6565b81810360608301526131b3816130e9565b905081810360808301526131c78184613117565b905081810360a08301526131da81613150565b905095945050505050565b6000815190506131f481612c0f565b92915050565b6000602082840312156132105761320f612869565b5b600061321e848285016131e5565b91505092915050565b600060208201905061323c6000830184612f52565b92915050565b600061325561325084612b55565b612b3a565b90508281526020810184848401111561327157613270612ad5565b5b61327c8482856128fa565b509392505050565b600082601f83011261329957613298612ad0565b5b81516132a9848260208601613242565b91505092915050565b6000602082840312156132c8576132c7612869565b5b600082015167ffffffffffffffff8111156132e6576132e561286e565b5b6132f284828501613284565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061334257607f821691505b602082108103613355576133546132fb565b5b50919050565b7f5573657220616c72656164792072656769737465726564000000000000000000600082015250565b60006133916017836128e9565b915061339c8261335b565b602082019050919050565b600060208201905081810360008301526133c081613384565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026134297fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826133ec565b61343386836133ec565b95508019841693508086168417925050509392505050565b600061346661346161345c84612cc6565b6127e5565b612cc6565b9050919050565b6000819050919050565b6134808361344b565b61349461348c8261346d565b8484546133f9565b825550505050565b600090565b6134a961349c565b6134b4818484613477565b505050565b5b818110156134d8576134cd6000826134a1565b6001810190506134ba565b5050565b601f82111561351d576134ee816133c7565b6134f7846133dc565b81016020851015613506578190505b61351a613512856133dc565b8301826134b9565b50505b505050565b600082821c905092915050565b600061354060001984600802613522565b1980831691505092915050565b6000613559838361352f565b9150826002028217905092915050565b613572826128de565b67ffffffffffffffff81111561358b5761358a612ada565b5b613595825461332a565b6135a08282856134dc565b600060209050601f8311600181146135d357600084156135c1578287015190505b6135cb858261354d565b865550613633565b601f1984166135e1866133c7565b60005b82811015613609578489015182556001820191506020850194506020810190506135e4565b868310156136265784890151613622601f89168261352f565b8355505b6001600288020188555050505b505050505050565b61364481612cc6565b811461364f57600080fd5b50565b6000815190506136618161363b565b92915050565b60006020828403121561367d5761367c612869565b5b600061368b84828501613652565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006136ce82612cc6565b91506136d983612cc6565b92508282019050808211156136f1576136f0613694565b5b92915050565b600060208201905061370c60008301846130c6565b92915050565b600060c08201905061372760008301876130b7565b61373460208301866130b7565b61374160408301856130c6565b8181036060830152613752816130e9565b905081810360808301526137668184613117565b905081810360a083015261377981613150565b905095945050505050565b6000819050919050565b60006137a96137a461379f84613784565b6127e5565b612cc6565b9050919050565b6137b98161378e565b82525050565b600060c0820190506137d460008301876137b0565b6137e160208301866130b7565b6137ee60408301856130c6565b81810360608301526137ff816130e9565b905081810360808301526138138184613117565b905081810360a083015261382681613150565b905095945050505050565b6000819050919050565b61384c61384782612c05565b613831565b82525050565b600061385e828461383b565b60208201915081905092915050565b6000819050919050565b600061389261388d6138888461386d565b6127e5565b612cc6565b9050919050565b6138a281613877565b82525050565b600060c0820190506138bd6000830187613899565b6138ca60208301866130b7565b6138d760408301856130c6565b81810360608301526138e8816130e9565b905081810360808301526138fc8184613117565b905081810360a083015261390f81613150565b905095945050505050565b6000819050919050565b61393561393082612cc6565b61391a565b82525050565b60006139478284613924565b60208201915081905092915050565b6000819050919050565b600061397b61397661397184613956565b6127e5565b612cc6565b9050919050565b61398b81613960565b82525050565b600060c0820190506139a66000830187613982565b6139b360208301866130b7565b6139c060408301856130c6565b81810360608301526139d1816130e9565b905081810360808301526139e58184613117565b905081810360a08301526139f881613150565b905095945050505050565b6000819050919050565b6000613a28613a23613a1e84613a03565b6127e5565b612cc6565b9050919050565b613a3881613a0d565b82525050565b600060c082019050613a536000830187613a2f565b613a6060208301866130b7565b613a6d60408301856130c6565b8181036060830152613a7e816130e9565b90508181036080830152613a928184613117565b905081810360a0830152613aa581613150565b905095945050505050565b60006040820190508181036000830152613aca8185612935565b90508181036020830152613ade8184612935565b90509392505050565b7f55736572206973206e6f74207265676973746572656400000000000000000000600082015250565b6000613b1d6016836128e9565b9150613b2882613ae7565b602082019050919050565b60006020820190508181036000830152613b4c81613b10565b9050919050565b7f55736572206e6f74207265676973746572656421000000000000000000000000600082015250565b6000613b896014836128e9565b9150613b9482613b53565b602082019050919050565b60006020820190508181036000830152613bb881613b7c565b9050919050565b7f557365722063616e6e6f7420616464207468656d73656c76657320617320667260008201527f69656e6421000000000000000000000000000000000000000000000000000000602082015250565b6000613c1b6025836128e9565b9150613c2682613bbf565b604082019050919050565b60006020820190508181036000830152613c4a81613c0e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613c8b82612cc6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613cbd57613cbc613694565b5b600182019050919050565b7f5573657220697320616c7265616479206120667269656e640000000000000000600082015250565b6000613cfe6018836128e9565b9150613d0982613cc8565b602082019050919050565b60006020820190508181036000830152613d2d81613cf1565b9050919050565b7f557365724e6f7452656769737465726564000000000000000000000000000000600082015250565b6000613d6a6011836128e9565b9150613d7582613d34565b602082019050919050565b60006020820190508181036000830152613d9981613d5d565b905091905056fe608060405234801561001057600080fd5b506119f4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631de2b13114610067578063262b54f5146100975780634eee424a146100c7578063b1a34e0d146100f7578063c9100bcb14610127578063eff0f5921461015c575b600080fd5b610081600480360381019061007c9190610bc2565b610191565b60405161008e9190610c1b565b60405180910390f35b6100b160048036038101906100ac9190610c36565b6101c2565b6040516100be9190610d21565b60405180910390f35b6100e160048036038101906100dc9190610d6f565b61022d565b6040516100ee9190610db7565b60405180910390f35b610111600480360381019061010c9190611017565b61050a565b60405161011e9190610c1b565b60405180910390f35b610141600480360381019061013c9190610d6f565b6106d2565b604051610153969594939291906111ea565b60405180910390f35b61017660048036038101906101719190610d6f565b6108e7565b604051610188969594939291906111ea565b60405180910390f35b600160205281600052604060002081815481106101ad57600080fd5b90600052602060002001600091509150505481565b60606001600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561022157602002820191906000526020600020905b81548152602001906001019080831161020d575b50505050509050919050565b600080600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461029c57600080fd5b60008083815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006102f69190610adb565b6004820160006103069190610adb565b6005820160006103169190610b1b565b50506000806000848152602001908152602001600020600001549050600060016000838152602001908152602001600020905060005b8180549050811015610422578482828154811061036c5761036b611260565b5b90600052602060002001540361040f576001828054905061038d91906112be565b81146103e35781600183805490506103a591906112be565b815481106103b6576103b5611260565b5b90600052602060002001548282815481106103d4576103d3611260565b5b90600052602060002001819055505b818054806103f4576103f36112f2565b5b60019003818190600052602060002001600090559055610422565b808061041a90611321565b91505061034c565b5060008085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682857f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a600080898152602001908152602001600020600101546000808a81526020019081526020016000206003016000808b81526020019081526020016000206004016000808c81526020019081526020016000206005016040516104f794939291906114fb565b60405180910390a4600192505050919050565b60008085886040516020016105209291906115be565b6040516020818303038152906040528051906020012090506040518060c001604052808981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815250600080838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190816105fd9190611781565b5060808201518160040190816106139190611781565b5060a08201518160050190816106299190611899565b50905050600160008981526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150558573ffffffffffffffffffffffffffffffffffffffff1688827fe77b8a549307a1a60bdd8c5fa64ede3706a3db2ac23c61d87b66af36eacf07f38a898051906020012089896040516106bc949392919061196b565b60405180910390a4809150509695505050505050565b6000806000606080606060008060008981526020019081526020016000209050806000015481600101548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600301846004018560050182805461073990611398565b80601f016020809104026020016040519081016040528092919081815260200182805461076590611398565b80156107b25780601f10610787576101008083540402835291602001916107b2565b820191906000526020600020905b81548152906001019060200180831161079557829003601f168201915b505050505092508180546107c590611398565b80601f01602080910402602001604051908101604052809291908181526020018280546107f190611398565b801561083e5780601f106108135761010080835404028352916020019161083e565b820191906000526020600020905b81548152906001019060200180831161082157829003601f168201915b5050505050915080805461085190611398565b80601f016020809104026020016040519081016040528092919081815260200182805461087d90611398565b80156108ca5780601f1061089f576101008083540402835291602001916108ca565b820191906000526020600020905b8154815290600101906020018083116108ad57829003601f168201915b505050505090509650965096509650965096505091939550919395565b60006020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600301805461093c90611398565b80601f016020809104026020016040519081016040528092919081815260200182805461096890611398565b80156109b55780601f1061098a576101008083540402835291602001916109b5565b820191906000526020600020905b81548152906001019060200180831161099857829003601f168201915b5050505050908060040180546109ca90611398565b80601f01602080910402602001604051908101604052809291908181526020018280546109f690611398565b8015610a435780601f10610a1857610100808354040283529160200191610a43565b820191906000526020600020905b815481529060010190602001808311610a2657829003601f168201915b505050505090806005018054610a5890611398565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8490611398565b8015610ad15780601f10610aa657610100808354040283529160200191610ad1565b820191906000526020600020905b815481529060010190602001808311610ab457829003601f168201915b5050505050905086565b508054610ae790611398565b6000825580601f10610af95750610b18565b601f016020900490600052602060002090810190610b179190610b5b565b5b50565b508054610b2790611398565b6000825580601f10610b395750610b58565b601f016020900490600052602060002090810190610b579190610b5b565b5b50565b5b80821115610b74576000816000905550600101610b5c565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610b9f81610b8c565b8114610baa57600080fd5b50565b600081359050610bbc81610b96565b92915050565b60008060408385031215610bd957610bd8610b82565b5b6000610be785828601610bad565b9250506020610bf885828601610bad565b9150509250929050565b6000819050919050565b610c1581610c02565b82525050565b6000602082019050610c306000830184610c0c565b92915050565b600060208284031215610c4c57610c4b610b82565b5b6000610c5a84828501610bad565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c9881610c02565b82525050565b6000610caa8383610c8f565b60208301905092915050565b6000602082019050919050565b6000610cce82610c63565b610cd88185610c6e565b9350610ce383610c7f565b8060005b83811015610d14578151610cfb8882610c9e565b9750610d0683610cb6565b925050600181019050610ce7565b5085935050505092915050565b60006020820190508181036000830152610d3b8184610cc3565b905092915050565b610d4c81610c02565b8114610d5757600080fd5b50565b600081359050610d6981610d43565b92915050565b600060208284031215610d8557610d84610b82565b5b6000610d9384828501610d5a565b91505092915050565b60008115159050919050565b610db181610d9c565b82525050565b6000602082019050610dcc6000830184610da8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dfd82610dd2565b9050919050565b610e0d81610df2565b8114610e1857600080fd5b50565b600081359050610e2a81610e04565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e8382610e3a565b810181811067ffffffffffffffff82111715610ea257610ea1610e4b565b5b80604052505050565b6000610eb5610b78565b9050610ec18282610e7a565b919050565b600067ffffffffffffffff821115610ee157610ee0610e4b565b5b610eea82610e3a565b9050602081019050919050565b82818337600083830152505050565b6000610f19610f1484610ec6565b610eab565b905082815260208101848484011115610f3557610f34610e35565b5b610f40848285610ef7565b509392505050565b600082601f830112610f5d57610f5c610e30565b5b8135610f6d848260208601610f06565b91505092915050565b600067ffffffffffffffff821115610f9157610f90610e4b565b5b610f9a82610e3a565b9050602081019050919050565b6000610fba610fb584610f76565b610eab565b905082815260208101848484011115610fd657610fd5610e35565b5b610fe1848285610ef7565b509392505050565b600082601f830112610ffe57610ffd610e30565b5b813561100e848260208601610fa7565b91505092915050565b60008060008060008060c0878903121561103457611033610b82565b5b600061104289828a01610bad565b965050602061105389828a01610bad565b955050604061106489828a01610e1b565b945050606087013567ffffffffffffffff81111561108557611084610b87565b5b61109189828a01610f48565b935050608087013567ffffffffffffffff8111156110b2576110b1610b87565b5b6110be89828a01610f48565b92505060a087013567ffffffffffffffff8111156110df576110de610b87565b5b6110eb89828a01610fe9565b9150509295509295509295565b61110181610b8c565b82525050565b61111081610df2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611150578082015181840152602081019050611135565b60008484015250505050565b600061116782611116565b6111718185611121565b9350611181818560208601611132565b61118a81610e3a565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b60006111bc82611195565b6111c681856111a0565b93506111d6818560208601611132565b6111df81610e3a565b840191505092915050565b600060c0820190506111ff60008301896110f8565b61120c60208301886110f8565b6112196040830187611107565b818103606083015261122b818661115c565b9050818103608083015261123f818561115c565b905081810360a083015261125381846111b1565b9050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112c982610b8c565b91506112d483610b8c565b92508282039050818111156112ec576112eb61128f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061132c82610b8c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361135e5761135d61128f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113b057607f821691505b6020821081036113c3576113c2611369565b5b50919050565b60008190508160005260206000209050919050565b600081546113eb81611398565b6113f58186611121565b94506001821660008114611410576001811461142657611459565b60ff198316865281151560200286019350611459565b61142f856113c9565b60005b8381101561145157815481890152600182019150602081019050611432565b808801955050505b50505092915050565b60008190508160005260206000209050919050565b6000815461148481611398565b61148e81866111a0565b945060018216600081146114a957600181146114bf576114f2565b60ff1983168652811515602002860193506114f2565b6114c885611462565b60005b838110156114ea578154818901526001820191506020810190506114cb565b808801955050505b50505092915050565b600060808201905061151060008301876110f8565b818103602083015261152281866113de565b9050818103604083015261153681856113de565b9050818103606083015261154a8184611477565b905095945050505050565b60008160601b9050919050565b600061156d82611555565b9050919050565b600061157f82611562565b9050919050565b61159761159282610df2565b611574565b82525050565b6000819050919050565b6115b86115b382610b8c565b61159d565b82525050565b60006115ca8285611586565b6014820191506115da82846115a7565b6020820191508190509392505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826115fa565b61164186836115fa565b95508019841693508086168417925050509392505050565b6000819050919050565b600061167e61167961167484610b8c565b611659565b610b8c565b9050919050565b6000819050919050565b61169883611663565b6116ac6116a482611685565b848454611607565b825550505050565b600090565b6116c16116b4565b6116cc81848461168f565b505050565b5b818110156116f0576116e56000826116b9565b6001810190506116d2565b5050565b601f82111561173557611706816113c9565b61170f846115ea565b8101602085101561171e578190505b61173261172a856115ea565b8301826116d1565b50505b505050565b600082821c905092915050565b60006117586000198460080261173a565b1980831691505092915050565b60006117718383611747565b9150826002028217905092915050565b61178a82611116565b67ffffffffffffffff8111156117a3576117a2610e4b565b5b6117ad8254611398565b6117b88282856116f4565b600060209050601f8311600181146117eb57600084156117d9578287015190505b6117e38582611765565b86555061184b565b601f1984166117f9866113c9565b60005b82811015611821578489015182556001820191506020850194506020810190506117fc565b8683101561183e578489015161183a601f891682611747565b8355505b6001600288020188555050505b505050505050565b601f8211156118945761186581611462565b61186e846115ea565b8101602085101561187d578190505b611891611889856115ea565b8301826116d1565b50505b505050565b6118a282611195565b67ffffffffffffffff8111156118bb576118ba610e4b565b5b6118c58254611398565b6118d0828285611853565b600060209050601f83116001811461190357600084156118f1578287015190505b6118fb8582611765565b865550611963565b601f19841661191186611462565b60005b8281101561193957848901518255600182019150602085019450602081019050611914565b868310156119565784890151611952601f891682611747565b8355505b6001600288020188555050505b505050505050565b600060808201905061198060008301876110f8565b61198d6020830186610c0c565b818103604083015261199f818561115c565b905081810360608301526119b381846111b1565b90509594505050505056fea2646970667358221220e46c517c6ab47f20d0135f638b5cb2f95ac023a41cdc9dbf129dafe3f32f3b5264736f6c63430008150033a2646970667358221220b50158eb1390514cac832307af201c979a419dbe013dff73385dc43914a30dfb64736f6c63430008150033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2610,
        "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
        "label": "getAllUsers",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(AllUserStruct)2593_storage)dyn_storage"
      },
      {
        "astId": 2615,
        "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
        "label": "users",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(User)2583_storage)"
      },
      {
        "astId": 2619,
        "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
        "label": "userExist",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2622,
        "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
        "label": "soulboundToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Soulbound)2563"
      },
      {
        "astId": 2657,
        "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
        "label": "identityContractInstance",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ERC735)2013"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AllUserStruct)2593_storage)dyn_storage": {
        "base": "t_struct(AllUserStruct)2593_storage",
        "encoding": "dynamic_array",
        "label": "struct UserRegistrationAndAuthentication.AllUserStruct[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC735)2013": {
        "encoding": "inplace",
        "label": "contract ERC735",
        "numberOfBytes": "20"
      },
      "t_contract(Soulbound)2563": {
        "encoding": "inplace",
        "label": "contract Soulbound",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)2583_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserRegistrationAndAuthentication.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)2583_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AllUserStruct)2593_storage": {
        "encoding": "inplace",
        "label": "struct UserRegistrationAndAuthentication.AllUserStruct",
        "members": [
          {
            "astId": 2585,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2587,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "accountAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2589,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "identityContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2592,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "claimIds",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(ClaimIds)2606_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ClaimIds)2606_storage": {
        "encoding": "inplace",
        "label": "struct UserRegistrationAndAuthentication.ClaimIds",
        "members": [
          {
            "astId": 2595,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "nameClaimId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2597,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "emailClaimId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 2599,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "passwordClaimId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 2601,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "isRegisteredClaimId",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 2603,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "friendListClaimId",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 2605,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "tokenIdClaimId",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(User)2583_storage": {
        "encoding": "inplace",
        "label": "struct UserRegistrationAndAuthentication.User",
        "members": [
          {
            "astId": 2571,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2573,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "email",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2575,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "passwordHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 2577,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "isRegistered",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 2580,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "friendList",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2582,
            "contract": "contracts/UserRegistrationAndAuthentication.sol:UserRegistrationAndAuthentication",
            "label": "soulboundTokenId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}