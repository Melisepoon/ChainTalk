{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"./extensions/IERC721Enumerable.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping (uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping (address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC721).interfaceId\n            || interfaceId == type(IERC721Metadata).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\n            : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\n     * in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    // solhint-disable-next-line no-inline-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant alphabet = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = alphabet[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n}\n"
    },
    "contracts/ERC735.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract ERC735 {\n    event ClaimRequested(\n        uint256 indexed claimRequestId,\n        uint256 indexed claimType,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri\n    );\n    event ClaimAdded(\n        bytes32 indexed claimId,\n        uint256 indexed claimType,\n        address indexed issuer,\n        uint256 signatureType,\n        bytes32 signature,\n        bytes claim,\n        string uri\n    );\n    event ClaimRemoved(\n        bytes32 indexed claimId,\n        uint256 indexed claimType,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri\n    );\n    event ClaimChanged(\n        bytes32 indexed claimId,\n        uint256 indexed claimType,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri\n    );\n\n    struct Claim {\n        uint256 claimType;\n        uint256 scheme;\n        address issuer; // msg.sender\n        bytes signature; // this.address + topic + data\n        bytes data;\n        string uri;\n    }\n\n    mapping(bytes32 => Claim) public claims;\n    mapping(uint256 => bytes32[]) public claimIdsByType;\n\n    function getClaim(\n        bytes32 _claimId\n    )\n        public\n        view\n        returns (\n            uint256 claimType,\n            uint256 scheme,\n            address issuer,\n            bytes memory signature,\n            bytes memory data,\n            string memory uri\n        )\n    {\n        Claim storage claim = claims[_claimId];\n        return (\n            claim.claimType,\n            claim.scheme,\n            claim.issuer,\n            claim.signature,\n            claim.data,\n            claim.uri\n        );\n    }\n\n    function getClaimIdsByType(\n        uint256 _claimType\n    ) public view returns (bytes32[] memory claimIds) {\n        return claimIdsByType[_claimType];\n    }\n\n    function addClaim(\n        uint256 _claimType,\n        uint256 _scheme,\n        address _issuer,\n        bytes memory _signature,\n        bytes memory _data,\n        string memory _uri\n    ) public returns (bytes32) {\n        bytes32 newClaimId = keccak256(abi.encodePacked(_issuer, _claimType));\n        claims[newClaimId] = Claim(\n            _claimType,\n            _scheme,\n            _issuer,\n            _signature,\n            _data,\n            _uri\n        );\n        claimIdsByType[_claimType].push(newClaimId);\n        emit ClaimAdded(\n            newClaimId,\n            _claimType,\n            _issuer,\n            _scheme,\n            keccak256(_signature),\n            _data,\n            _uri\n        );\n        return newClaimId;\n    }\n\n    function removeClaim(bytes32 _claimId) public returns (bool success) {\n        require(msg.sender == claims[_claimId].issuer);\n        delete claims[_claimId];\n\n        uint256 claimType = claims[_claimId].claimType;\n        bytes32[] storage claimsOfType = claimIdsByType[claimType];\n        for (uint256 i = 0; i < claimsOfType.length; i++) {\n            if (claimsOfType[i] == _claimId) {\n                if (i != claimsOfType.length - 1) {\n                    claimsOfType[i] = claimsOfType[claimsOfType.length - 1];\n                }\n                claimsOfType.pop();\n                break;\n            }\n        }\n\n        emit ClaimRemoved(\n            _claimId,\n            claimType,\n            claims[_claimId].scheme,\n            claims[_claimId].issuer,\n            claims[_claimId].signature,\n            claims[_claimId].data,\n            claims[_claimId].uri\n        );\n        return true;\n    }\n}\n"
    },
    "contracts/MessageStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\ncontract MessageStorage {\n    // Struct to represent the structure of a message\n    struct Message {\n        address sender; // Ethereum address of the sender\n        address recipient; // Ethereum address of the recipient\n        string content; // Content of the message\n        uint256 timestamp; // Timestamp when the message was sent\n        bool isRead; // Flag to indicate if the message has been read\n        bool isDeleted; // Flag to indicate if the message has been deleted\n    }\n\n    struct shortMessage {\n        address sender;\n        uint256 timestamp;\n        string content;\n    }\n\n    // Mapping to associate each user's Ethereum address with an array of messages\n    mapping(address => Message[]) public userMessages;\n    mapping(bytes32 => shortMessage[]) public allMessages;\n    // mapping(bytes32 => Message[]) private allMessages;\n\n    // Event to emit when a new message is sent\n    event MessageSent(\n        address indexed sender,\n        address indexed recipient,\n        string content\n    );\n\n    // Function to send a new message\n    function sendMessage(address _recipient, string memory _content) public {\n        Message memory newMessage = Message({\n            sender: msg.sender,\n            recipient: _recipient,\n            content: _content,\n            timestamp: block.timestamp,\n            isRead: false,\n            isDeleted: false\n        });\n\n        shortMessage memory newshortMessage = shortMessage({\n            sender: msg.sender,\n            timestamp: block.timestamp,\n            content: _content\n        });\n\n        bytes32 chatCode = _getChatCode(msg.sender, _recipient);\n\n        userMessages[msg.sender].push(newMessage);\n        userMessages[_recipient].push(newMessage);\n        allMessages[chatCode].push(newshortMessage);\n\n        emit MessageSent(msg.sender, _recipient, _content);\n    }\n\n    function _getChatCode(\n        address _user1,\n        address _user2\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_user1, _user2));\n    }\n\n    // // function to return the message from that friend\n    // function readFriendMessage(\n    //     address _friendAddress\n    // ) external view returns (shortMessage[] memory) {\n    //     bytes32 chatCode = _getChatCode(msg.sender, _friendAddress);\n    //     return allMessages[chatCode];\n    // }\n    function readFriendMessage(\n        address _friendAddress\n    ) external view returns (shortMessage[] memory) {\n        bytes32 chatCode1 = _getChatCode(msg.sender, _friendAddress);\n        bytes32 chatCode2 = _getChatCode(_friendAddress, msg.sender);\n\n        shortMessage[] memory messages1 = allMessages[chatCode1];\n        shortMessage[] memory messages2 = allMessages[chatCode2];\n\n        uint256 totalLength = messages1.length + messages2.length;\n        shortMessage[] memory combinedMessages = new shortMessage[](\n            totalLength\n        );\n\n        uint256 index = 0;\n\n        for (uint256 i = 0; i < messages1.length; i++) {\n            combinedMessages[i] = messages1[i];\n            index++;\n        }\n\n        for (uint256 j = 0; j < messages2.length; j++) {\n            combinedMessages[messages1.length + j] = messages2[j];\n            index++;\n        }\n\n        sortMessagesByTimestamp(combinedMessages);\n\n        return combinedMessages;\n    }\n\n    function sortMessagesByTimestamp(\n        shortMessage[] memory messages\n    ) internal pure {\n        if (messages.length <= 1) {\n            return; // no need to sort\n        }\n        for (uint256 i = 0; i < messages.length - 1; i++) {\n            for (uint256 j = i + 1; j < messages.length; j++) {\n                if (messages[i].timestamp > messages[j].timestamp) {\n                    shortMessage memory temp = messages[i];\n                    messages[i] = messages[j];\n                    messages[j] = temp;\n                }\n            }\n        }\n    }\n\n    // Function to retrieve all messages for the caller\n    function getMyMessages() public view returns (Message[] memory) {\n        return userMessages[msg.sender];\n    }\n\n    // Function to update the status of a message to \"read\"\n    function markAsRead(uint256 _messageIndex) public {\n        require(\n            _messageIndex < userMessages[msg.sender].length,\n            \"Invalid message index\"\n        );\n\n        userMessages[msg.sender][_messageIndex].isRead = true;\n    }\n\n    function deleteMessage(uint256 _messageIndex) public {\n        require(\n            _messageIndex < userMessages[msg.sender].length,\n            \"Invalid message index\"\n        );\n\n        // Mark the message as deleted\n        userMessages[msg.sender][_messageIndex].isDeleted = true;\n    }\n\n    fallback() external payable {}\n\n    receive() external payable {}\n}\n"
    },
    "contracts/Soulbound.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract Soulbound is ERC721, ERC721URIStorage {\n    uint256 private _tokenIdCounter;\n    using Strings for uint256;\n    string public constant TOKEN_URI =\n        \"ipfs://QmacW3dcCGqpsbfsgFJaXpJ2RKZnSTYjUPvyvmZLSnC5iN\";\n    constructor() ERC721(\"SoulBound\", \"SBT\") {}\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override {\n        require(from == address(0), \"Token not transferable\");\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function getTokenCounter() public view returns (uint256) {\n        return _tokenIdCounter;\n    }\n\n    function safeMint(address to) public {\n        _tokenIdCounter += 1;\n        _safeMint(to, _tokenIdCounter);\n    }\n\n    // The following functions are overrides required by Solidity.\n\n    function _burn(\n        uint256 tokenId\n    ) internal override(ERC721, ERC721URIStorage) {\n        super._burn(tokenId);\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\n        require(_exists(tokenId), \"URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        if (bytes(baseURI).length > 0) {\n            return TOKEN_URI;\n        } else {\n            return super.tokenURI(tokenId);\n        }\n    }\n\n    function _baseURI() internal pure override returns (string memory) {\n        return \"https://example.com/token/\";\n    }\n}\n"
    },
    "contracts/UserRegistrationAndAuthentication.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport \"./Soulbound.sol\";\nimport \"./ERC735.sol\"; // Import the ERC735 contract\n\nerror UserNotRegistered();\n\n//0x3a2f83b7b29e34942a4a3211bcb3e8e146c4f779193fc4f3246c41fcf5c221b8\ncontract UserRegistrationAndAuthentication {\n    // Struct to store user information\n    struct User {\n        string name; // User's name\n        string email; // User's email address\n        bytes32 passwordHash; // Hashed password\n        bool isRegistered; // Flag to indicate if the user is registered\n        address[] friendList; // Array to store friend addresses\n        uint256 soulboundTokenId; // To store soulbound token id\n    }\n    struct AllUserStruct {\n        string name;\n        address accountAddress;\n        address identityContractAddress;\n        ClaimIds claimIds; // Add ClaimIds struct\n    }\n    struct ClaimIds {\n        bytes32 nameClaimId;\n        bytes32 emailClaimId;\n        bytes32 passwordClaimId;\n        bytes32 isRegisteredClaimId;\n        bytes32 friendListClaimId;\n        bytes32 tokenIdClaimId;\n    }\n\n    AllUserStruct[] getAllUsers;\n\n    // Mapping to link each user's Ethereum address with their user information\n    mapping(address => User) public users;\n    mapping(address => bool) public userExist;\n\n    Soulbound public soulboundToken; // Instance of the Soulbound token contract\n\n    // Event to emit when a new user is registered\n    event UserRegistered(\n        address indexed userAddress,\n        string name,\n        string email\n    );\n\n    event FriendAdded(\n        address indexed userAddress,\n        address indexed friendAddress\n    );\n    event FriendListUploaded(\n        address indexed userAddress,\n        bytes32 friendListClaimId\n    );\n\n    constructor(address _soulboundTokenAddress) {\n        soulboundToken = Soulbound(_soulboundTokenAddress);\n    }\n\n    ERC735 public identityContractInstance;\n\n    event IdentityContractDeployed(address indexed identityContractAddress);\n\n    function deployIdentityContract() external {\n        identityContractInstance = new ERC735();\n        emit IdentityContractDeployed(address(identityContractInstance));\n    }\n\n    // Function to register a new user\n    function registerUser(\n        string memory _name,\n        string memory _email,\n        bytes32 _passwordHash\n    ) public {\n        require(!users[msg.sender].isRegistered, \"User already registered\");\n        User memory newUser = User({\n            name: _name,\n            email: _email,\n            passwordHash: _passwordHash,\n            isRegistered: true,\n            friendList: new address[](0), // to initiate empty friend list\n            soulboundTokenId: 0 //Initialise with 0\n        });\n        //push details of user into array\n        users[msg.sender] = newUser;\n        // Mint a new Soulbound token for the user\n        uint256 tokenId = soulboundToken.getTokenCounter() + 1;\n        soulboundToken.safeMint(msg.sender);\n        users[msg.sender].soulboundTokenId = tokenId;\n        // To create identity claims:\n        ClaimIds memory claimIds;\n        claimIds.nameClaimId = identityContractInstance.addClaim(1,1,msg.sender,\"\",bytes(_name),\"\");\n        claimIds.emailClaimId = identityContractInstance.addClaim(\n            2,\n            1,\n            msg.sender,\n            \"\",\n            bytes(_email),\n            \"\"\n        );\n        claimIds.passwordClaimId = identityContractInstance.addClaim(\n            3,\n            1,\n            msg.sender,\n            \"\",\n            abi.encodePacked(_passwordHash),\n            \"\"\n        );\n        bytes memory isRegisteredData = abi.encodePacked(uint256(1));\n        claimIds.isRegisteredClaimId = identityContractInstance.addClaim(\n            4,\n            1,\n            msg.sender,\n            \"\",\n            isRegisteredData,\n            \"\"\n        );\n        address[] memory emptyFriendList;\n        bytes memory friendListData = abi.encode(emptyFriendList);\n        claimIds.friendListClaimId = identityContractInstance.addClaim(\n            5,\n            1,\n            msg.sender,\n            \"\",\n            friendListData,\n            \"\"\n        );\n        bytes memory tokenIdData = abi.encode(tokenId);\n        claimIds.tokenIdClaimId = identityContractInstance.addClaim(\n            6,\n            1,\n            msg.sender,\n            \"\",\n            tokenIdData,\n            \"\"\n        );\n        getAllUsers.push(\n            AllUserStruct({\n                name: _name,\n                accountAddress: msg.sender,\n                identityContractAddress: address(identityContractInstance),\n                claimIds: claimIds\n            })\n        );\n        userExist[msg.sender] = true;\n        emit UserRegistered(msg.sender, _name, _email);\n    }\n\n    function checkUserExists() public view returns (bool) {\n        return userExist[msg.sender];\n    }\n\n    // Function to retrieve user information for the caller\n    function getMyUserInfo()\n        public\n        view\n        returns (string memory, string memory, address[] memory)\n    {\n        require(users[msg.sender].isRegistered, \"User not registered\");\n\n        return (\n            users[msg.sender].name,\n            users[msg.sender].email,\n            users[msg.sender].friendList\n        );\n    }\n\n    function checkUserExist(address pubkey) public view returns (bool) {\n        return bytes(users[pubkey].name).length > 0;\n    }\n\n    // GET USERNAME\n    function getUsername(address pubkey) external view returns (string memory) {\n        require(checkUserExist(pubkey), \"User is not registered\");\n        // return the name of user\n        return users[pubkey].name;\n    }\n\n\n    function authenticate() public view returns (bool) {\n        require(users[msg.sender].isRegistered, \"User not registered\");\n\n        uint256 tokenId = users[msg.sender].soulboundTokenId;\n        return tokenId != 0; // Return true if token ID is not zero\n    }\n\n    function addFriend(address _friendAddress) public {\n        // check that user is registered\n        require(users[msg.sender].isRegistered, \"User not registered!\");\n        require(\n            msg.sender != _friendAddress,\n            \"User cannot add themselves as friend!\"\n        );\n        if (!users[_friendAddress].isRegistered) revert UserNotRegistered();\n\n        // check if friend already exist in list\n        bool isFriend = false;\n        for (uint256 i = 0; i < users[msg.sender].friendList.length; i++) {\n            if (users[msg.sender].friendList[i] == _friendAddress) {\n                isFriend = true;\n                break;\n            }\n        }\n        require(!isFriend, \"User is already a friend\");\n        users[msg.sender].friendList.push(_friendAddress);\n        emit FriendAdded(msg.sender, _friendAddress);\n\n        //bi-directional friend addition\n        users[_friendAddress].friendList.push(msg.sender);\n        emit FriendAdded(_friendAddress, msg.sender);\n    }\n\n    // GET MY FRIEND\n    function getMyFriendList() public view returns (address[] memory) {\n        require(users[msg.sender].isRegistered, \"User not registered\");\n        return users[msg.sender].friendList;\n    }\n\n    // function to fetch all registered users\n    function getAllAppUser() public view returns (AllUserStruct[] memory) {\n        return getAllUsers;\n    }\n\n    function getUser(\n        address _userAddress\n    ) internal view returns (AllUserStruct memory) {\n        for (uint256 i = 0; i < getAllUsers.length; i++) {\n            if (getAllUsers[i].accountAddress == _userAddress) {\n                return getAllUsers[i];\n            }\n        }\n        revert(\"UserNotRegistered\");\n    }\n\n    function uploadClaims(address userAddress) public {\n        require(userExist[userAddress], \"User not registered\");\n\n        // Retrieve user information from the user struct\n        AllUserStruct memory user = getUser(userAddress);\n        ClaimIds memory claimIds = user.claimIds;\n\n        // Retrieve the current friend list from the user struct\n        address[] memory friendList = users[userAddress].friendList;\n\n        // Encode friend list data\n        bytes memory friendListData = abi.encode(friendList);\n\n        // Add friend list claim to the ERC735 contract\n        bytes32 friendListClaimId = identityContractInstance.addClaim(\n            5, // Claim type for friend list\n            1, // Scheme\n            userAddress, // Issuer\n            \"\", // Signature\n            friendListData, // Data\n            \"\" // URI\n        );\n\n        // Emit event or log friend list addition\n        emit FriendListUploaded(userAddress, friendListClaimId);\n\n        // Update the claim ID in the user's ClaimIds structure\n        claimIds.friendListClaimId = friendListClaimId;\n    }\n\n    function getSoulboundTokenId(\n        address userAddress\n    ) public view returns (uint256) {\n        require(userExist[userAddress], \"User not registered\");\n        return users[userAddress].soulboundTokenId;\n    }\n\n    function getSoulboundTokenURI(\n        address userAddress\n    ) public view returns (string memory) {\n        require(userExist[userAddress], \"User not registered\");\n        uint256 tokenId = users[userAddress].soulboundTokenId;\n        return soulboundToken.tokenURI(tokenId);\n    }\n\n    fallback() external payable {}\n\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}